---
import Cpu from '@/components/icons/cpu.astro';
import CpuOff from '@/components/icons/cpu-off.astro';
import Sun from '@/components/icons/sun.astro';
import Moon from '@/components/icons/moon.astro';
import LinkedIn from '@/components/icons/linkedin.astro';
import GitHub from '@/components/icons/github.astro';
import Cv from '@/components/icons/cv.astro';
import Puzzle from '@/components/icons/puzzle.astro';
import Mail from '@/components/icons/mail.astro';
import Copy from '@/components/icons/copy.astro';
import CopyCheck from '@/components/icons/copy-check.astro';
import ArrowUp from '@/components/icons/arrow-up.astro';
import Info from '@/components/icons/info.astro';
import Tooltip from '@/components/icons/tooltip.astro';

const icons = {
  cpu: Cpu,
  cpuOff: CpuOff,
  sun: Sun,
  moon: Moon,
  linkedIn: LinkedIn,
  gitHub: GitHub,
  cv: Cv,
  puzzle: Puzzle,
  mail: Mail,
  copy: Copy,
  copyCheck: CopyCheck,
  arrowUp: ArrowUp,
  info: Info,
  tooltip: Tooltip,
};

type IconName = keyof typeof icons;

/*
"[key: string]: any;" Permite atributos (attrs) adicionales,
el nombre del atributo debe ser un string y su valor de cualquier tipo (any)
*/
interface Props {
  name: IconName;
  class?: string;
  [key: string]: any;
}

const { name, class: className, ...attrs } = Astro.props as Props;

const IconComponent = icons[name];
---

{
  IconComponent ? (
    <IconComponent class={className} {...attrs} />
  ) : (
    <span class="text-red-500 font-mono text-xs">
      [icon "{name}" not found]
    </span>
  )
}
